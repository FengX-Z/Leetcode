a = 'Yes'
b = 'No'
if b == 'Yes':
    print (b)
else:
    print (a)

a = 'Yes'
b = 'No'
if b == 'No':
    print (b)
else:
    print (a)



x = np.array([0.8147, 0.9058, 0.1270, 0.9134, 0.6324, 0.0975, 0.2785, 0.5469, 0.9575, 0.9649])
y = np.array([0.2269, 0.9533, -0.1331, 0.6697, 0.0064, -0.1870, -0.3367, -0.0476, 0.9763, 1.0050])
theta_1 = (np.sum(x*y) * np.sum(x**4) - np.sum(x**2*y) * np.sum(x**3)) / (np.sum(x**2) * np.sum(x**4) - np.sum(x**3) * np.sum(x**3))
theta_2 = (np.sum(x**2*y) * np.sum(x**2) - np.sum(x*y) * np.sum(x**3)) / (np.sum(x**2) * np.sum(x**4) - np.sum(x**3) * np.sum(x**3))
print(theta_1, theta_2)


x = np.random.uniform(-1, 2, 15)
y = x ** 3 - 3 * x ** 2 - 2
noise = np.random.normal(0, 0.3, size=len(y))
y_noise = y + noise
a = np.arange(-1,2.01,0.01)
b = a ** 3 - 3 * a ** 2 - 2
print(x, y, noise, y_noise)

fig = plt.figure(dpi=300, figsize=(10, 10))
rect = [0.5, 0.7, 0.7, 0.5]
ax = plt.axes(rect)
ax.plot(a, b, label='y')
ax.scatter(x, y_noise, label='y_noise', c='red')
plt.title('Function')
plt.legend(loc='best')
plt.grid(True)
plt.show()


x = np.arange(0, 2*np.pi, 0.1)
y = np.sin(x)
z = np.cos(x)
fig = plt.figure(dpi = 300, figsize = (10,10))
rect = [0.5, 0.7, 0.7, 0.5]
ax = plt.axes(rect)
ax.plot(x, y, label='y=sin(x)')
ax.plot(x, z, label='z=cos(x)')
plt.title('Function')
plt.legend(loc='best')
plt.grid(True)
plt.show()


def Regression(X, Y):
    p = np.column_stack([np.ones_like(X), X, X**2, X**3])
    p_T = p.T
    theta = np.linalg.inv(p_T @ p) @ p_T @ Y
    return theta

theta_m = Regression(x, y_noise)
print(theta_m)


